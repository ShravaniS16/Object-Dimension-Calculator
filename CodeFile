import cv2
import numpy as np

def midpoint(ptA, ptB):
    return ((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)

def detect_coin(contours, known_diameter):
    for contour in contours:
        
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        if 15 < radius < 60:  # Adjust this range as needed
            diameter_in_pixels = 2 * radius
            pixel_per_metric = diameter_in_pixels / known_diameter
            return pixel_per_metric, (int(x), int(y), int(radius))
    return None, None


# Load the image
image = cv2.imread('object_image.jpg')
if image is None:
    print("Error: Image not found.")
    exit()

# Resize the image if necessary
max_width, max_height = 800, 600
h, w = image.shape[:2]
scaling_factor = min(max_width / w, max_height / h)
new_size = (int(w * scaling_factor), int(h * scaling_factor))
image = cv2.resize(image, new_size)

# Convert to grayscale and apply Gaussian blur
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (7, 7), 0)
edges = cv2.Canny(blurred, 30, 150)

# Find contours
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Show the edges for debugging
cv2.imshow("Edges", edges)

# Detect the coin
known_diameter = 2.3  # Diameter of the coin in cm
pixel_per_metric, coin_info = detect_coin(contours, known_diameter)

if pixel_per_metric is not None:
    (coin_x, coin_y, coin_radius) = coin_info
    cv2.circle(image, (coin_x, coin_y), coin_radius, (0, 255, 0), 2)
    cv2.putText(image, "Reference Coin", (coin_x - 40, coin_y - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    cv2.imshow("Detected Coin", image)
    cv2.waitKey(0)

    # Select ROI
    roi = cv2.selectROI("Select Object", image, fromCenter=False, showCrosshair=True)
    x, y, w, h = roi

    # Check if ROI is valid
    if w > 0 and h > 0:
        # Crop the selected ROI
        selected_roi = image[y:y+h, x:x+w]

        # Convert the selected ROI to grayscale and find contours
        roi_gray = cv2.cvtColor(selected_roi, cv2.COLOR_BGR2GRAY)
        roi_blurred = cv2.GaussianBlur(roi_gray, (7, 7), 0)
        roi_edges = cv2.Canny(roi_blurred, 30, 150)
        roi_contours, _ = cv2.findContours(roi_edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if len(roi_contours) == 0:
            print("No contours found in the selected ROI.")
        else:
            print(f"Contours found in ROI: {len(roi_contours)}")

        for contour in roi_contours:
            # Remove contour area filtering
            # Approximate the contour
            epsilon = 0.02 * cv2.arcLength(contour, True)  # Adjust epsilon for approximation
            approx = cv2.approxPolyDP(contour, epsilon, True)

            print(f"Contour approximation points: {len(approx)}")  # Debugging output

            # Draw the contour for visualization
            cv2.drawContours(selected_roi, [approx], -1, (0, 255, 0), 2)

            # Get bounding box (rotated rectangle)
            rect = cv2.minAreaRect(approx)
            box = cv2.boxPoints(rect)
            box = np.array(box, dtype="int")

            # Draw the bounding box
            cv2.drawContours(selected_roi, [box], 0, (255, 0, 0), 2)

            # Compute midpoint of the box's sides
            (tl, tr, br, bl) = box
            (tltrX, tltrY) = midpoint(tl, tr)
            (blbrX, blbrY) = midpoint(bl, br)
            (tlblX, tlblY) = midpoint(tl, bl)
            (trbrX, trbrY) = midpoint(tr, br)

            # Compute the Euclidean distance between midpoints (for width and height)
            dA = np.sqrt(((tltrX - blbrX) ** 2) + ((tltrY - blbrY) ** 2))  # Height
            dB = np.sqrt(((tlblX - trbrX) ** 2) + ((tlblY - trbrY) ** 2))  # Width

            # Calculate object dimensions in cm
            object_width = dB / pixel_per_metric
            object_height = dA / pixel_per_metric

            # Print object dimensions in the console
            print(f"Object Width: {object_width:.2f} cm, Object Height: {object_height:.2f} cm")

            # Draw dimensions on the image
            cv2.putText(selected_roi, "{:.1f}cm".format(object_width), (int(tltrX - 10), int(tltrY - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
            cv2.putText(selected_roi, "{:.1f}cm".format(object_height), (int(trbrX + 10), int(trbrY)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

        # Show the ROI with measurements
        cv2.imshow("Measured ROI", selected_roi)
        cv2.waitKey(0)
    else:
        print("Invalid ROI selected.")
    
    cv2.destroyAllWindows()
else:
    print("Coin not detected. Please check the input image.")
